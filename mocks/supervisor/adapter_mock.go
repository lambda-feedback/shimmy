// Code generated by mockery v2.42.1. DO NOT EDIT.

package supervisor_mocks

import (
	context "context"

	supervisor "github.com/lambda-feedback/shimmy/supervisor"
	mock "github.com/stretchr/testify/mock"

	worker "github.com/lambda-feedback/shimmy/worker"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter[I interface{}, O interface{}] struct {
	mock.Mock
}

type MockAdapter_Expecter[I interface{}, O interface{}] struct {
	mock *mock.Mock
}

func (_m *MockAdapter[I, O]) EXPECT() *MockAdapter_Expecter[I, O] {
	return &MockAdapter_Expecter[I, O]{mock: &_m.Mock}
}

// Send provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAdapter[I, O]) Send(_a0 context.Context, _a1 I, _a2 worker.SendParams) (O, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 O
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, I, worker.SendParams) (O, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, I, worker.SendParams) O); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(O)
	}

	if rf, ok := ret.Get(1).(func(context.Context, I, worker.SendParams) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockAdapter_Send_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 I
//   - _a2 worker.SendParams
func (_e *MockAdapter_Expecter[I, O]) Send(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockAdapter_Send_Call[I, O] {
	return &MockAdapter_Send_Call[I, O]{Call: _e.mock.On("Send", _a0, _a1, _a2)}
}

func (_c *MockAdapter_Send_Call[I, O]) Run(run func(_a0 context.Context, _a1 I, _a2 worker.SendParams)) *MockAdapter_Send_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(I), args[2].(worker.SendParams))
	})
	return _c
}

func (_c *MockAdapter_Send_Call[I, O]) Return(_a0 O, _a1 error) *MockAdapter_Send_Call[I, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_Send_Call[I, O]) RunAndReturn(run func(context.Context, I, worker.SendParams) (O, error)) *MockAdapter_Send_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *MockAdapter[I, O]) Start(_a0 context.Context, _a1 worker.StartParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.StartParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAdapter_Start_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 worker.StartParams
func (_e *MockAdapter_Expecter[I, O]) Start(_a0 interface{}, _a1 interface{}) *MockAdapter_Start_Call[I, O] {
	return &MockAdapter_Start_Call[I, O]{Call: _e.mock.On("Start", _a0, _a1)}
}

func (_c *MockAdapter_Start_Call[I, O]) Run(run func(_a0 context.Context, _a1 worker.StartParams)) *MockAdapter_Start_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker.StartParams))
	})
	return _c
}

func (_c *MockAdapter_Start_Call[I, O]) Return(_a0 error) *MockAdapter_Start_Call[I, O] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Start_Call[I, O]) RunAndReturn(run func(context.Context, worker.StartParams) error) *MockAdapter_Start_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *MockAdapter[I, O]) Stop(_a0 context.Context, _a1 worker.StopParams) (supervisor.WaitFunc, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 supervisor.WaitFunc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.StopParams) (supervisor.WaitFunc, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, worker.StopParams) supervisor.WaitFunc); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(supervisor.WaitFunc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, worker.StopParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAdapter_Stop_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 worker.StopParams
func (_e *MockAdapter_Expecter[I, O]) Stop(_a0 interface{}, _a1 interface{}) *MockAdapter_Stop_Call[I, O] {
	return &MockAdapter_Stop_Call[I, O]{Call: _e.mock.On("Stop", _a0, _a1)}
}

func (_c *MockAdapter_Stop_Call[I, O]) Run(run func(_a0 context.Context, _a1 worker.StopParams)) *MockAdapter_Stop_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker.StopParams))
	})
	return _c
}

func (_c *MockAdapter_Stop_Call[I, O]) Return(_a0 supervisor.WaitFunc, _a1 error) *MockAdapter_Stop_Call[I, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_Stop_Call[I, O]) RunAndReturn(run func(context.Context, worker.StopParams) (supervisor.WaitFunc, error)) *MockAdapter_Stop_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter[I interface{}, O interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter[I, O] {
	mock := &MockAdapter[I, O]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
