// Code generated by mockery v2.42.1. DO NOT EDIT.

package execution

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager[I interface{}, O interface{}] struct {
	mock.Mock
}

type MockManager_Expecter[I interface{}, O interface{}] struct {
	mock *mock.Mock
}

func (_m *MockManager[I, O]) EXPECT() *MockManager_Expecter[I, O] {
	return &MockManager_Expecter[I, O]{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, data
func (_m *MockManager[I, O]) Send(ctx context.Context, data I) (O, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 O
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, I) (O, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, I) O); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(O)
	}

	if rf, ok := ret.Get(1).(func(context.Context, I) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockManager_Send_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - data I
func (_e *MockManager_Expecter[I, O]) Send(ctx interface{}, data interface{}) *MockManager_Send_Call[I, O] {
	return &MockManager_Send_Call[I, O]{Call: _e.mock.On("Send", ctx, data)}
}

func (_c *MockManager_Send_Call[I, O]) Run(run func(ctx context.Context, data I)) *MockManager_Send_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(I))
	})
	return _c
}

func (_c *MockManager_Send_Call[I, O]) Return(_a0 O, _a1 error) *MockManager_Send_Call[I, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Send_Call[I, O]) RunAndReturn(run func(context.Context, I) (O, error)) *MockManager_Send_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockManager[I, O]) Shutdown() {
	_m.Called()
}

// MockManager_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockManager_Shutdown_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockManager_Expecter[I, O]) Shutdown() *MockManager_Shutdown_Call[I, O] {
	return &MockManager_Shutdown_Call[I, O]{Call: _e.mock.On("Shutdown")}
}

func (_c *MockManager_Shutdown_Call[I, O]) Run(run func()) *MockManager_Shutdown_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Shutdown_Call[I, O]) Return() *MockManager_Shutdown_Call[I, O] {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Shutdown_Call[I, O]) RunAndReturn(run func()) *MockManager_Shutdown_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager[I interface{}, O interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager[I, O] {
	mock := &MockManager[I, O]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
