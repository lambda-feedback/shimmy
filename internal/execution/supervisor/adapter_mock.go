// Code generated by mockery v2.43.0. DO NOT EDIT.

package supervisor

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/lambda-feedback/shimmy/internal/execution/worker"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockAdapter) Send(_a0 context.Context, _a1 string, _a2 map[string]interface{}, _a3 time.Duration) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, time.Duration) (map[string]interface{}, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, time.Duration) map[string]interface{}); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, time.Duration) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockAdapter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 map[string]interface{}
//   - _a3 time.Duration
func (_e *MockAdapter_Expecter) Send(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockAdapter_Send_Call {
	return &MockAdapter_Send_Call{Call: _e.mock.On("Send", _a0, _a1, _a2, _a3)}
}

func (_c *MockAdapter_Send_Call) Run(run func(_a0 context.Context, _a1 string, _a2 map[string]interface{}, _a3 time.Duration)) *MockAdapter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockAdapter_Send_Call) Return(_a0 map[string]interface{}, _a1 error) *MockAdapter_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_Send_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, time.Duration) (map[string]interface{}, error)) *MockAdapter_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *MockAdapter) Start(_a0 context.Context, _a1 worker.StartConfig) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.StartConfig) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAdapter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 worker.StartConfig
func (_e *MockAdapter_Expecter) Start(_a0 interface{}, _a1 interface{}) *MockAdapter_Start_Call {
	return &MockAdapter_Start_Call{Call: _e.mock.On("Start", _a0, _a1)}
}

func (_c *MockAdapter_Start_Call) Run(run func(_a0 context.Context, _a1 worker.StartConfig)) *MockAdapter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker.StartConfig))
	})
	return _c
}

func (_c *MockAdapter_Start_Call) Return(_a0 error) *MockAdapter_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Start_Call) RunAndReturn(run func(context.Context, worker.StartConfig) error) *MockAdapter_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0
func (_m *MockAdapter) Stop(_a0 worker.StopConfig) (ReleaseFunc, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 ReleaseFunc
	var r1 error
	if rf, ok := ret.Get(0).(func(worker.StopConfig) (ReleaseFunc, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(worker.StopConfig) ReleaseFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ReleaseFunc)
		}
	}

	if rf, ok := ret.Get(1).(func(worker.StopConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAdapter_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 worker.StopConfig
func (_e *MockAdapter_Expecter) Stop(_a0 interface{}) *MockAdapter_Stop_Call {
	return &MockAdapter_Stop_Call{Call: _e.mock.On("Stop", _a0)}
}

func (_c *MockAdapter_Stop_Call) Run(run func(_a0 worker.StopConfig)) *MockAdapter_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(worker.StopConfig))
	})
	return _c
}

func (_c *MockAdapter_Stop_Call) Return(_a0 ReleaseFunc, _a1 error) *MockAdapter_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_Stop_Call) RunAndReturn(run func(worker.StopConfig) (ReleaseFunc, error)) *MockAdapter_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
